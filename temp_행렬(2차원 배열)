행렬 2차원 배열
from queue import deque

## 상/하/좌/우 이동
dx, dy = (-1, 1, 0, 0), (0, 0, -1, 1)

## 행의 개수 N, 열의 개수 M
N, M = map(int, input().split())
G = [list(map(int, input().split())) for _ in range(N)]
visited = [[0 for _ in range(M)] for _ in range(N)]
순차 탐색 (방문한 노드 출력) - DFS 또는 BFS
def dfs(x, y):
    visited[x][y] = 1
    for k in range(4):
        nx, ny = x + dx[k], y + dy[k]
        if 0 <= nx < N and 0 <= ny < M:
            if not visited[nx][ny]:
                dfs(nx, ny)
def bfs(x0, y0):
    visited[x0][y0] = 1
    q = deque([(x0, y0)])
    while q:
        x, y = q.popleft()
        for k in range(4):
            nx, ny = x + dx[k], y + dy[k]
            if 0 <= nx < N and 0 <= ny < M:
                if not visited[nx][ny]:
                    visited[nx][ny] = 1
                    q.append((nx, ny))
연결요소 탐색 (개수 또는 길이/깊이) - DFS 또는 BFS
def dfs(x, y, count=0):
    visited[x][y] = 1
    for k in range(4):
        nx, ny = x + dx[k], y + dy[k]
        if 0 <= nx < N and 0 <= ny < M:
            if not visited[nx][ny] and G[nx][ny] == 1:
                count = dfs(nx, ny, count+1)
    return count
def bfs(x0, y0, count=0):
    visited[x0][y0] = 1
    q = deque([(x0, y0)])
    while q:
        x, y = q.popleft()
        for k in range(4):
            nx, ny = x + dx[k], y + dy[k]
            if 0 <= nx < N and 0 <= ny < M:
                if not visited[nx][ny] and G[nx][ny] == 1:
                    count += 1
                    visited[nx][ny] = 1
                    q.append((nx, ny))
    return count
최단거리 탐색 - 무조건 BFS
def bfs(x0, y0, xn, yn):
    visited[x0][y0] = 1
    q = deque([(x0, y0)])
    while q:
        x, y = q.popleft()
        for k in range(4):
            nx, ny = x + dx[k], y + dy[k]
            if 0 <= nx < N and 0 <= ny < M:
                if not visited[nx][ny] and G[nx][ny] == 1:
                    visited[nx][ny] = visited[x][y] + 1
                    q.append((nx, ny))
            if (nx, ny) == (xn, yn):
                return visited[xn][yn] - 1
    return -1
조건탐색 (백트래킹) - 무조건 DFS
def dfs(x, y, total):
    global result
    
    if (x, y) == (N - 1, M - 1):
        result = min(result, total)
        return
    
    for k in range(4):
        nx, ny = x + dx[k], y + dy[k]
        for 0 <= nx < N and 0 <= ny < M:
            if not visited[nx][ny]:
                visited[nx][ny] = 1
                dfs(nx, ny, total + G[nx][ny])
                visited[nx][ny] = 0

INF = float('inf')
result = INF
dfs(0, 0, G[0][0])
print(result)
